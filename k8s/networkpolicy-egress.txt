
要获取P12文件的内容或从FQDN获取Common Name，您可以执行以下步骤：

1. 获取P12文件的内容

P12文件是PKCS#12格式的数字证书文件，通常用于SSL / TLS客户端身份验证。要获取P12文件的内容，您可以使用openssl命令。

以下是使用openssl命令从P12文件中提取私钥和证书的示例：

```bash
openssl pkcs12 -in filename.p12 -nodes -nocerts -out key.pem
openssl pkcs12 -in filename.p12 -nokeys -out cert.pem
```

在上面的命令中，-in选项指定P12文件的路径和名称。-nodes选项用于不加密输出私钥，-nocerts选项用于不输出证书。使用-out选项将私钥和证书输出到不同的PEM文件中。

2. 从FQDN获取Common Name

FQDN（Fully Qualified Domain Name）是指包含完整主机名和域名的完全限定的互联网主机名。要从FQDN获取Common Name，您可以使用openssl命令。

以下是使用openssl命令从FQDN中提取Common Name的示例：

```bash
echo | openssl s_client -servername fqdn -connect fqdn:443 2>/dev/null | openssl x509 -noout -subject | awk -F= '{print $NF}'
```

在上面的命令中，-servername选项指定FQDN，-connect选项指定端口号。使用2>/dev/null将标准错误输出重定向到/dev/null以忽略错误信息。最后，使用awk命令提取Common Name。

kubectl get namespaces -l nstype=runtime -o jsonpath='{.items[*].metadata.name}' | xargs -I {} kubectl get secrets -n {} --field-selector type=Opaque


kubectl get secrets --all-namespaces -o=jsonpath='{range .items[?(@.type=="Opaque")]}{.metadata.namespace}: {.metadata.name}{"\n"}{end}'


#!/bin/bash

# 循环所有命名空间
for ns in $(kubectl get namespaces -o=name); do
  # 获取标签为123的命名空间
  if kubectl get $ns --show-labels | grep -q '123'; then
    # 获取类型为Opaque的Secret
    for secret in $(kubectl get secret -n $(basename $ns) -o=name | grep -e '-type\s*Opaque$'); do
      # 输出结果
      echo "Namespace: $(basename $ns), Secret: $(basename $secret)"
    done
  fi
done


如果您想使用GKE网络策略（Network Policy）来允许对CIDR块的egress（出口）流量进行限制，但想要排除其中的单个IP地址，可以使用 `except` 字段来达到目的。

以下是一个示例YAML文件，其中使用`except`字段来排除CIDR块中的单个IP地址：

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/16
        except:
        - 10.0.1.5
    ports:
    - protocol: TCP
      port: 80
```

NetworkPolicyPeer 描述了允许进出流量的对等点。这个参数只允许某些字段组合。

ingress.from.ipBlock (IPBlock)

IPBlock 针对特定的 IP CIDR 范围设置策略。如果设置了此字段，则不可以设置其他字段。

IPBlock 定义一个特定的 CIDR 范围（例如 192.168.1.0/24、2001:db8::/64）， 来自这个 IP 范围的流量来源将会被允许访问与 NetworkPolicySpec 的 podSelector 匹配的 Pod 集合。 except 字段则设置应排除在此规则之外的 CIDR 范围。

ingress.from.ipBlock.cidr (string)，必需

CIDR 是指定 IP 组块的字符串，例如 "192.168.1.0/24" 或 "2001:db8::/64"。

ingress.from.ipBlock.except ([]string)

except 是一个由 CIDR 范围组成的列表，其中指定的 CIDR 都应排除在此 IP 区块范围之外。 例如 "192.168.1.0/24" 或 "2001:db8::/64"。 如果 except 字段的值超出 ipBlock.cidr 的范围则被视为无效策略。


egress.to ([]NetworkPolicyPeer)

针对此规则所选择的 Pod 的出口流量的目的地列表。此列表中的目的地使用逻辑或操作进行组合。如果此字段为空或缺失， 则此规则匹配所有目的地（流量不受目的地限制）。如果此字段存在且至少包含一项目的地，则仅当流量与目标列表中的至少一个匹配时， 此规则才允许出口流量。

NetworkPolicyPeer 描述允许进出流量的对等点。这个对象只允许某些字段组合。

egress.to.ipBlock (IPBlock)

ipBlock 针对特定的 IP 区块定义策略。如果设置了此字段，则其他不可以设置其他字段。

IPBlock 描述一个特定的 CIDR 范围（例如 192.168.1.0/24、2001:db8::/64）， 与 NetworkPolicySpec 的 podSelector 匹配的 Pod 将被允许连接到这个 IP 范围，作为其出口流量目的地。 except 字段则设置了不被此规则影响的 CIDR 范围。

egress.to.ipBlock.cidr (string)，必需

CIDR 是用来表达 IP 组块的字符串，例如 "192.168.1.0/24" 或 "2001:db8::/64"。

egress.to.ipBlock.except ([]string)

except 定义不应包含在 ipBlock 内的 CIDR 范围列表。例如 "192.168.1.0/24" 或 "2001:db8::/64"。 如果 except 的值超出 ipBlock.cidr 的范围则被拒绝。




在这个规则中，`cidr`字段指定了允许的CIDR块，而`except`字段则指定了要排除的IP地址。这将使得您的网络策略在针对特定CIDR块的egress流量时，排除掉您指定的IP地址。

请注意，在您的规则中使用的IP地址应该遵循CIDR格式。此外，您可以根据需要更改协议和端口的值。

如果您想使用GKE网络策略（Network Policy）来允许对某个IP段的egress（出口）流量进行限制，但想要排除某个特定的IP地址，可以尝试使用以下规则：

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: <IP段的CIDR>
        except:
        - <要排除的IP地址>
    ports:
    - protocol: TCP
      port: <端口号>
```

在这个规则中，您可以使用 `ipBlock` 来指定要允许的IP段，使用 `except` 来指定要排除的IP地址。这将使得您的网络策略在针对特定IP段的egress流量时，排除掉您指定的IP地址。

请注意，在您的规则中使用的IP段和IP地址应该遵循CIDR（无类域间路由选择）的格式。


在GKE网络策略中，except子句是可用的，并可以用于排除在Egress规则中指定的IP地址。

在GKE网络策略中，except关键字指定要排除的IP地址、IP块、协议和端口。您可以使用except子句来定义排除在您的规则中的IP地址、IP块或协议和端口。

以下是使用except子句从GKE网络策略Egress规则中排除一个IP地址的示例：

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-egress-to-ip-block
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: "10.0.0.0/8"
        except:
        - ip: "10.0.0.5"



apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: "10.0.0.0/8"
    - ipBlock:
        cidr: "192.168.0.0/16"


https://cloud.redhat.com/blog/guide-to-kubernetes-egress-network-policies


如果想要排除某个单个IP地址，可以通过创建一个特殊的网络策略来实现。以下是一些例子：

案例1：排除单个IP地址的所有egress流量

```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.1/32
    ports:
    - protocol: TCP
      port: 80
```

在这个案例中，我们创建了一个名为“allow-all-egress”的网络策略，该策略允许所有的egress流量，但是将除了“10.0.0.1”之外的所有流量都限制掉。这是通过添加一个“except”段来实现的。你可以根据实际情况修改IP地址，端口和协议。

案例2：排除单个IP地址的特定egress流量

假设在案例1的基础上，我们只希望排除HTTP（80端口）协议的egress流量：

```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.1/32
    ports:
    - protocol: TCP
      port: 80
      except:
      - port: 80
        protocol: TCP
```

在这个案例中，我们添加了一个“except”段，将HTTP协议的80端口排除了出去。

总之，在GKE中，通过创建一个特定的网络策略，我们可以排除某个单个IP地址或者特定的协议、端口等，来对egress流量进行更精细化的控制。




如果您想使用GKE网络策略（Network Policy）来允许对CIDR块的egress（出口）流量进行限制，但想要排除其中的单个IP地址，可以使用 `except` 字段来达到目的。

以下是一个示例YAML文件，其中使用`except`字段来排除CIDR块中的单个IP地址：

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/16
        except:
        - 10.0.1.5
    ports:
    - protocol: TCP
      port: 80
```

NetworkPolicyPeer 描述了允许进出流量的对等点。这个参数只允许某些字段组合。

ingress.from.ipBlock (IPBlock)

IPBlock 针对特定的 IP CIDR 范围设置策略。如果设置了此字段，则不可以设置其他字段。

IPBlock 定义一个特定的 CIDR 范围（例如 192.168.1.0/24、2001:db8::/64）， 来自这个 IP 范围的流量来源将会被允许访问与 NetworkPolicySpec 的 podSelector 匹配的 Pod 集合。 except 字段则设置应排除在此规则之外的 CIDR 范围。

ingress.from.ipBlock.cidr (string)，必需

CIDR 是指定 IP 组块的字符串，例如 "192.168.1.0/24" 或 "2001:db8::/64"。

ingress.from.ipBlock.except ([]string)

except 是一个由 CIDR 范围组成的列表，其中指定的 CIDR 都应排除在此 IP 区块范围之外。 例如 "192.168.1.0/24" 或 "2001:db8::/64"。 如果 except 字段的值超出 ipBlock.cidr 的范围则被视为无效策略。


egress.to ([]NetworkPolicyPeer)

针对此规则所选择的 Pod 的出口流量的目的地列表。此列表中的目的地使用逻辑或操作进行组合。如果此字段为空或缺失， 则此规则匹配所有目的地（流量不受目的地限制）。如果此字段存在且至少包含一项目的地，则仅当流量与目标列表中的至少一个匹配时， 此规则才允许出口流量。

NetworkPolicyPeer 描述允许进出流量的对等点。这个对象只允许某些字段组合。

egress.to.ipBlock (IPBlock)

ipBlock 针对特定的 IP 区块定义策略。如果设置了此字段，则其他不可以设置其他字段。

IPBlock 描述一个特定的 CIDR 范围（例如 192.168.1.0/24、2001:db8::/64）， 与 NetworkPolicySpec 的 podSelector 匹配的 Pod 将被允许连接到这个 IP 范围，作为其出口流量目的地。 except 字段则设置了不被此规则影响的 CIDR 范围。

egress.to.ipBlock.cidr (string)，必需

CIDR 是用来表达 IP 组块的字符串，例如 "192.168.1.0/24" 或 "2001:db8::/64"。

egress.to.ipBlock.except ([]string)

except 定义不应包含在 ipBlock 内的 CIDR 范围列表。例如 "192.168.1.0/24" 或 "2001:db8::/64"。 如果 except 的值超出 ipBlock.cidr 的范围则被拒绝。




在这个规则中，`cidr`字段指定了允许的CIDR块，而`except`字段则指定了要排除的IP地址。这将使得您的网络策略在针对特定CIDR块的egress流量时，排除掉您指定的IP地址。

请注意，在您的规则中使用的IP地址应该遵循CIDR格式。此外，您可以根据需要更改协议和端口的值。

如果您想使用GKE网络策略（Network Policy）来允许对某个IP段的egress（出口）流量进行限制，但想要排除某个特定的IP地址，可以尝试使用以下规则：

```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: <IP段的CIDR>
        except:
        - <要排除的IP地址>
    ports:
    - protocol: TCP
      port: <端口号>
```

在这个规则中，您可以使用 `ipBlock` 来指定要允许的IP段，使用 `except` 来指定要排除的IP地址。这将使得您的网络策略在针对特定IP段的egress流量时，排除掉您指定的IP地址。

请注意，在您的规则中使用的IP段和IP地址应该遵循CIDR（无类域间路由选择）的格式。


在GKE网络策略中，except子句是可用的，并可以用于排除在Egress规则中指定的IP地址。

在GKE网络策略中，except关键字指定要排除的IP地址、IP块、协议和端口。您可以使用except子句来定义排除在您的规则中的IP地址、IP块或协议和端口。

以下是使用except子句从GKE网络策略Egress规则中排除一个IP地址的示例：

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-egress-to-ip-block
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: "10.0.0.0/8"
        except:
        - ip: "10.0.0.5"



apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: "10.0.0.0/8"
    - ipBlock:
        cidr: "192.168.0.0/16"


https://cloud.redhat.com/blog/guide-to-kubernetes-egress-network-policies


如果想要排除某个单个IP地址，可以通过创建一个特殊的网络策略来实现。以下是一些例子：

案例1：排除单个IP地址的所有egress流量

```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.1/32
    ports:
    - protocol: TCP
      port: 80
```

在这个案例中，我们创建了一个名为“allow-all-egress”的网络策略，该策略允许所有的egress流量，但是将除了“10.0.0.1”之外的所有流量都限制掉。这是通过添加一个“except”段来实现的。你可以根据实际情况修改IP地址，端口和协议。

案例2：排除单个IP地址的特定egress流量

假设在案例1的基础上，我们只希望排除HTTP（80端口）协议的egress流量：

```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.1/32
    ports:
    - protocol: TCP
      port: 80
      except:
      - port: 80
        protocol: TCP
```

在这个案例中，我们添加了一个“except”段，将HTTP协议的80端口排除了出去。

总之，在GKE中，通过创建一个特定的网络策略，我们可以排除某个单个IP地址或者特定的协议、端口等，来对egress流量进行更精细化的控制。

My gke networkPolicy deny all egress and ingress .
Now I have permit egress to a cidr range . But I want to forbidden one of the egress ip from a cidr range
how to do this ?

NetworkPolicy forbidden egress  to a single ip address

To create a `NetworkPolicy` that forbids egress traffic to a single IP address in a GKE cluster, you can define a `NetworkPolicy` resource with an `egress` rule that specifies the IP address you want to forbid.

Here's an example YAML configuration for a `NetworkPolicy` that forbids egress traffic to a single IP address:


To forbid egress traffic to a single IP address within a CIDR range that is otherwise permitted in a GKE cluster using Network Policies, you can define a `NetworkPolicy` resource with an `egress` rule that specifies the IP address you want to block.

Here's an example YAML configuration for a `NetworkPolicy` that allows egress traffic to a CIDR range but blocks traffic to a single IP address within that range:

要禁止使用网络策略将流量出口到GKE集群中允许的CIDR范围内的单个IP地址，
您可以使用“出口”规则定义“NetworkPolicy”资源，该规则指定要阻止的IP地址。以下是“NetworkPolicy”的YAML配置示例，该配置允许将流量传输到CIDR范围，但阻止流量到该范围内的单个IP地址：
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: block-ip-policy
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: {{CIDR_RANGE}}
    ports:
    - protocol: TCP
      port: 80
  - to:
    - ipBlock:
        cidr: {{IP_ADDRESS_TO_BLOCK}}/32
    ports:
    - protocol: TCP
      port: 80
```

In this example, replace `{{CIDR_RANGE}}` with the CIDR range you want to permit egress traffic to, and replace `{{IP_ADDRESS_TO_BLOCK}}` with the IP address you want to block.
The first `egress` rule allows traffic to the CIDR range on port 80, while the second `egress` rule blocks traffic to the specified IP address on port 80.

This configuration blocks egress traffic to the specified IP address within the permitted CIDR range on port 80. You can modify the `ports` section to block traffic on other ports as well.

在本例中，将`{{CIDR_RANGE}}`替换为您要允许出口流量的CIDR范围，
并将`{{IP_ADDRESS_TO_BLOCK}}`替换为要阻止的IP地址。
第一个“出口”规则允许流量到端口80上的CIDR范围，而第二个“出口”规则阻止流量到端口80上的指定IP地址。此配置阻止出口流量到端口80上允许的CIDR范围内的指定IP地址。您也可以修改“端口”部分，以阻止其他端口上的流量。


To forbid one specific IP address from the CIDR range that you have permitted egress to,
you can create a `NetworkPolicy` that allows egress to the CIDR range and then denies egress to the specific IP address that you want to block.
Here's an example `NetworkPolicy` YAML that achieves this:

非常抱歉，我犯了一个错误。我之前提供的规则确实是禁止进入流量的规则而不是禁止流出流量的规则。如果您想要禁止CIDR范围中的某个IP地址的出口流量，您需要编写一个类似下面的规则：

```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-egress-to-ip
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - except:
      - ipBlock:
          cidr: 10.0.0.5/32
  policyTypes:
  - Egress
```

在这个例子中，网络策略允许从 Pod 流出到所有目的地的 TCP 端口 80 和 443，但是通过 except 字段指定不允许流出到 CIDR 范围内的 IP 地址 10.0.0.5 的 TCP 端口 80 和 443。

请注意，在这个例子中，我们使用了 `0.0.0.0/0` 作为目标 IP 地址，这意味着我们允许 Pod 流出到任何 IP 地址，除了 `10.0.0.5`。您可以相应地更改目标 IP 地址和端口以满足您的需求。
