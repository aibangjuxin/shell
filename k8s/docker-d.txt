docker run -it 和 docker run -itd 的区别在于它们的运行模式不同。
docker run -it 是在一个新的容器中启动一个交互式的shell，并在后台不断输出日志信息，可以在控制台上监视运行中的容器。这种模式适用于监视正在运行的容器或执行某些需要不断交互的任务。
docker run -itd 是在后台启动一个非交互式的容器，这意味着容器在运行时不会输出任何信息，用户只能通过查看日志或使用其他监视工具来了解容器的运行情况。这种模式适用于部署复杂应用程序、批处理大型数据、避免阻塞普通应用程序等场景。
因此，通常建议使用 docker run -it 来启动嵌入式交互式shell，而将日志输出交由后台容器完成。如果需要在后台运行非交互式容器，可以使用 docker run -itd。

禁止docker容器输出/dev/stdout和/dev/stderr

 aibangjuxin: how to 禁止docker容器输出/dev/stdout和/dev/stderr
---
Raycast AI: 要禁止Docker容器输出到`/dev/stdout`和`/dev/stderr`，可以在运行容器时使用`--log-driver`选项来指定一个不输出到标准输出的日志驱动程序，例如`syslog`或`journald`。例如：

```
docker run --log-driver=syslog myimage
```

这将使用`syslog`作为日志驱动程序，将容器日志记录到系统日志中，而不是输出到`/dev/stdout`和`/dev/stderr`。您还可以将`--log-opt`选项与`--log-driver`一起使用，以进一步配置日志记录。
要禁止Docker容器输出到`/dev/stdout`和`/dev/stderr`,可以使用以下几种方法:
1. 使用`--detach`或`-d`运行容器:
bash
docker run -d your-image
这将以detached模式运行容器,不挂起控制台,从而避免输出到stdout。
2. 使用`--log-driver none`禁止任何日志输出:
bash
docker run -d --log-driver none your-image
3. 重定向stdout和stderr到`/dev/null`:
bash
docker run -d your-image > /dev/null 2>&1
这将启动容器,但重定向stdout到`/dev/null`,并将stderr重定向到与stdout相同的位置,从而禁止输出。
4. 给容器指定一个空的`pseudo-TTY`调用,这将阻止分配授权tty:
bash
docker run -d your-image /bin/bash -c 'while true; do sleep 1; done' < /dev/null

这阻止分配功能完整的tty,从而禁止输出。
以上方法可以单独使用或组合使用。相比其他方法,我个人更推荐`--log-driver none`,因为它更简单直接,可以完全禁止任何日志输出。
